/*
 * TextShader.osl by Quentin Masingarbe (2018)
 * see https://github.com/qmasingarbe/osl-shaders
 *
 * This is a shader written in OSL (Open Shading language)
 * allowing the procedural render of text without the need of a map.
 * Original use case was procedural weight/size text
 * on instances of containers at render time.
 * Project was developped on Houdini 17.5 and Arnold HtoA 4.0.2
 *
 * Ray tracing part is partially copied from Leander at:
 * https://blender.stackexchange.com/questions/105748/can-i-map-a-vector-image-on-a-mesh
 *
 * Xml loading part is inspired by matrixdisplay.osl from Michel J. Anders :
 * https://github.com/varkenvarken/osl-shaders
 */


// ray tracing functions
float linear_function(float x, point p1, point p2) {
    float x1 = p1[0];
    float y1 = p1[1];
    float x2 = p2[0];
    float y2 = p2[1];
    if (x1 == x2)
        return 0.0;
    float m = ((y2 - y1) / (x2 - x1));
    float n = y1 - m * x1;
    return (m*x+n);
}
int hit(point p, point p1, point p2) {
    float x = p[0];
    if (p1[0] == p2[0])
        return 0;
    if (p1[0] < p2[0])
        if (p1[0] > x || p2[0] < x)
            return 0;
    if (p1[0] > p2[0])
        if (p1[0] < x || p2[0] > x)
            return 0;

    if (linear_function(x, p1, p2) > p[1])
        return 1;
    return 0;
}


// actual shader
shader TextShader(
        string dataXml = "D:\3d\environment\container\characters.xml",
        string inputText = "Test text",
        float charSpacing = 0.5,
        float scale = 1.0,
        float scaleX = 1.0,
        float scaleY = 1.0,
        float offsetX = 0.0,
        float offsetY = 0.0,
        output float renderedText = 0.0)
{
    // check input
    float safeCharSpacing;
    if(charSpacing < 0.6){
        safeCharSpacing = 0.6;
    }else{
        safeCharSpacing = charSpacing;
    }
    
    // scale and offset position
    point currentPos = point(u, v, 0);
    currentPos[0] = currentPos[0] / scaleX / scale;
    currentPos[1] = currentPos[1] / scaleY / scale;
    currentPos -= point(offsetX, offsetY, 0);
    
    // innt vars
    point pointOne;
    point pointTwo;
    int hitNumber = 0;
    point charPos;

    // find which character to render
    int charNum = (int)floor(currentPos[0]/safeCharSpacing);
    if(charNum >= 0 && charNum < strlen(inputText)) {
        // load this char polylines from xml
        string searchPath = format("/font/char[@name='%s']//line", substr(inputText,charNum,1));
        int nodeId = dict_find(dataXml, searchPath);
        while(nodeId != 0){
            dict_value(nodeId, "posOne", pointOne);
            dict_value(nodeId, "posTwo", pointTwo);
            
            // ray cast and count intersection for each polyline
            charPos = currentPos - (point(safeCharSpacing, 0, 0)*charNum);
            hitNumber += hit(charPos, pointOne, pointTwo);
            
            nodeId = dict_next(nodeId);
        }
        
        // outut color
        if(hitNumber % 2 == 1){
            renderedText = 1.0;
        }
    }
}